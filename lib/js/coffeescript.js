'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

var _compilerBase = require('../compiler-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const inputMimeTypes = ['text/cjsx', 'text/coffeescript'];
let coffee = null;
let cjsx = null;

/**
 * @access private
 */
class CoffeeScriptCompiler extends _compilerBase.SimpleCompilerBase {
  constructor() {
    super();
    this.compilerOptions.sourceMap = true;
  }

  static getInputMimeTypes() {
    return inputMimeTypes;
  }

  static getOutputMimeType() {
    return 'application/javascript';
  }

  compileSync(sourceCode, filePath) {
    coffee = coffee || require('coffee-script');
    cjsx = cjsx || require('coffee-react-transform');

    var _coffee$compile = coffee.compile(cjsx(sourceCode), Object.assign({ filename: filePath }, this.compilerOptions));

    let js = _coffee$compile.js,
        v3SourceMap = _coffee$compile.v3SourceMap;


    js = `${ js }\n` + `//# sourceMappingURL=data:application/json;base64,${ (0, _btoa2.default)(unescape(encodeURIComponent(v3SourceMap))) }\n` + `//# sourceURL=${ this.convertFilePath(filePath) }`;

    return {
      code: js,
      mimeType: 'application/javascript'
    };
  }

  convertFilePath(filePath) {
    if (process.platform === 'win32') {
      filePath = `/${ _path2.default.resolve(filePath).replace(/\\/g, '/') }`;
    }

    return encodeURI(filePath);
  }

  getCompilerVersion() {
    return require('coffee-script/package.json').version;
  }
}
exports.default = CoffeeScriptCompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9jb2ZmZWVzY3JpcHQuanMiXSwibmFtZXMiOlsiaW5wdXRNaW1lVHlwZXMiLCJjb2ZmZWUiLCJjanN4IiwiQ29mZmVlU2NyaXB0Q29tcGlsZXIiLCJjb25zdHJ1Y3RvciIsImNvbXBpbGVyT3B0aW9ucyIsInNvdXJjZU1hcCIsImdldElucHV0TWltZVR5cGVzIiwiZ2V0T3V0cHV0TWltZVR5cGUiLCJjb21waWxlU3luYyIsInNvdXJjZUNvZGUiLCJmaWxlUGF0aCIsInJlcXVpcmUiLCJjb21waWxlIiwiT2JqZWN0IiwiYXNzaWduIiwiZmlsZW5hbWUiLCJqcyIsInYzU291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb252ZXJ0RmlsZVBhdGgiLCJjb2RlIiwibWltZVR5cGUiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJyZXNvbHZlIiwicmVwbGFjZSIsImVuY29kZVVSSSIsImdldENvbXBpbGVyVmVyc2lvbiIsInZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLE1BQU1BLGlCQUFpQixDQUFDLFdBQUQsRUFBYyxtQkFBZCxDQUF2QjtBQUNBLElBQUlDLFNBQVMsSUFBYjtBQUNBLElBQUlDLE9BQU8sSUFBWDs7QUFFQTs7O0FBR2UsTUFBTUMsb0JBQU4sMENBQXNEO0FBQ25FQyxnQkFBYztBQUNaO0FBQ0EsU0FBS0MsZUFBTCxDQUFxQkMsU0FBckIsR0FBaUMsSUFBakM7QUFDRDs7QUFFRCxTQUFPQyxpQkFBUCxHQUEyQjtBQUN6QixXQUFPUCxjQUFQO0FBQ0Q7O0FBRUQsU0FBT1EsaUJBQVAsR0FBMkI7QUFDekIsV0FBTyx3QkFBUDtBQUNEOztBQUVEQyxjQUFZQyxVQUFaLEVBQXdCQyxRQUF4QixFQUFrQztBQUNoQ1YsYUFBU0EsVUFBVVcsUUFBUSxlQUFSLENBQW5CO0FBQ0FWLFdBQU9BLFFBQVFVLFFBQVEsd0JBQVIsQ0FBZjs7QUFGZ0MsMEJBSVJYLE9BQU9ZLE9BQVAsQ0FDdEJYLEtBQUtRLFVBQUwsQ0FEc0IsRUFFdEJJLE9BQU9DLE1BQVAsQ0FBYyxFQUFFQyxVQUFVTCxRQUFaLEVBQWQsRUFBc0MsS0FBS04sZUFBM0MsQ0FGc0IsQ0FKUTs7QUFBQSxRQUkzQlksRUFKMkIsbUJBSTNCQSxFQUoyQjtBQUFBLFFBSXZCQyxXQUp1QixtQkFJdkJBLFdBSnVCOzs7QUFRaENELFNBQU0sSUFBRUEsRUFBRyxLQUFOLEdBQ0Ysc0RBQW9ELG9CQUFLRSxTQUFTQyxtQkFBbUJGLFdBQW5CLENBQVQsQ0FBTCxDQUFnRCxLQURsRyxHQUVGLGtCQUFnQixLQUFLRyxlQUFMLENBQXFCVixRQUFyQixDQUErQixHQUZsRDs7QUFJQSxXQUFPO0FBQ0xXLFlBQU1MLEVBREQ7QUFFTE0sZ0JBQVU7QUFGTCxLQUFQO0FBSUQ7O0FBRURGLGtCQUFnQlYsUUFBaEIsRUFBMEI7QUFDeEIsUUFBSWEsUUFBUUMsUUFBUixLQUFxQixPQUF6QixFQUFrQztBQUNoQ2QsaUJBQVksS0FBRyxlQUFLZSxPQUFMLENBQWFmLFFBQWIsRUFBdUJnQixPQUF2QixDQUErQixLQUEvQixFQUFzQyxHQUF0QyxDQUEyQyxHQUExRDtBQUNEOztBQUVELFdBQU9DLFVBQVVqQixRQUFWLENBQVA7QUFDRDs7QUFFRGtCLHVCQUFxQjtBQUNuQixXQUFPakIsUUFBUSw0QkFBUixFQUFzQ2tCLE9BQTdDO0FBQ0Q7QUExQ2tFO2tCQUFoRDNCLG9CIiwiZmlsZSI6ImNvZmZlZXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGJ0b2EgZnJvbSAnYnRvYSc7XG5pbXBvcnQge1NpbXBsZUNvbXBpbGVyQmFzZX0gZnJvbSAnLi4vY29tcGlsZXItYmFzZSc7XG5cbmNvbnN0IGlucHV0TWltZVR5cGVzID0gWyd0ZXh0L2Nqc3gnLCAndGV4dC9jb2ZmZWVzY3JpcHQnXTtcbmxldCBjb2ZmZWUgPSBudWxsO1xubGV0IGNqc3ggPSBudWxsO1xuXG4vKipcbiAqIEBhY2Nlc3MgcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2ZmZWVTY3JpcHRDb21waWxlciBleHRlbmRzIFNpbXBsZUNvbXBpbGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb21waWxlck9wdGlvbnMuc291cmNlTWFwID0gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnB1dE1pbWVUeXBlcygpIHtcbiAgICByZXR1cm4gaW5wdXRNaW1lVHlwZXM7XG4gIH1cblxuICBzdGF0aWMgZ2V0T3V0cHV0TWltZVR5cGUoKSB7XG4gICAgcmV0dXJuICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JztcbiAgfVxuXG4gIGNvbXBpbGVTeW5jKHNvdXJjZUNvZGUsIGZpbGVQYXRoKSB7XG4gICAgY29mZmVlID0gY29mZmVlIHx8IHJlcXVpcmUoJ2NvZmZlZS1zY3JpcHQnKTtcbiAgICBjanN4ID0gY2pzeCB8fCByZXF1aXJlKCdjb2ZmZWUtcmVhY3QtdHJhbnNmb3JtJyk7XG5cbiAgICBsZXQge2pzLCB2M1NvdXJjZU1hcH0gPSBjb2ZmZWUuY29tcGlsZShcbiAgICAgIGNqc3goc291cmNlQ29kZSksXG4gICAgICBPYmplY3QuYXNzaWduKHsgZmlsZW5hbWU6IGZpbGVQYXRoIH0sIHRoaXMuY29tcGlsZXJPcHRpb25zKSk7XG5cbiAgICBqcyA9IGAke2pzfVxcbmAgK1xuICAgICAgYC8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJHtidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh2M1NvdXJjZU1hcCkpKX1cXG5gICtcbiAgICAgIGAvLyMgc291cmNlVVJMPSR7dGhpcy5jb252ZXJ0RmlsZVBhdGgoZmlsZVBhdGgpfWA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29kZToganMsXG4gICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXG4gICAgfTtcbiAgfVxuXG4gIGNvbnZlcnRGaWxlUGF0aChmaWxlUGF0aCkge1xuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICBmaWxlUGF0aCA9IGAvJHtwYXRoLnJlc29sdmUoZmlsZVBhdGgpLnJlcGxhY2UoL1xcXFwvZywgJy8nKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBlbmNvZGVVUkkoZmlsZVBhdGgpO1xuICB9XG5cbiAgZ2V0Q29tcGlsZXJWZXJzaW9uKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdjb2ZmZWUtc2NyaXB0L3BhY2thZ2UuanNvbicpLnZlcnNpb247XG4gIH1cbn1cbiJdfQ==