'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

var _compilerBase = require('../compiler-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const inputMimeTypes = ['text/cjsx', 'text/coffeescript'];
let coffee = null;
let cjsx = null;

/**
 * @access private
 */
class CoffeeScriptCompiler extends _compilerBase.SimpleCompilerBase {
  constructor() {
    super();
    this.compilerOptions.sourceMap = true;
  }

  static getInputMimeTypes() {
    return inputMimeTypes;
  }

  compileSync(sourceCode, filePath) {
    coffee = coffee || require('coffee-script');
    cjsx = cjsx || require('coffee-react-transform');

    var _coffee$compile = coffee.compile(cjsx(sourceCode), Object.assign({ filename: filePath }, this.compilerOptions));

    let js = _coffee$compile.js,
        v3SourceMap = _coffee$compile.v3SourceMap;


    js = `${ js }\n` + `//# sourceMappingURL=data:application/json;base64,${ (0, _btoa2.default)(unescape(encodeURIComponent(v3SourceMap))) }\n` + `//# sourceURL=${ this.convertFilePath(filePath) }`;

    return {
      code: js,
      mimeType: 'application/javascript'
    };
  }

  convertFilePath(filePath) {
    if (process.platform === 'win32') {
      filePath = `/${ _path2.default.resolve(filePath).replace(/\\/g, '/') }`;
    }

    return encodeURI(filePath);
  }

  getCompilerVersion() {
    return require('coffee-script/package.json').version;
  }
}
exports.default = CoffeeScriptCompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9jb2ZmZWVzY3JpcHQuanMiXSwibmFtZXMiOlsiaW5wdXRNaW1lVHlwZXMiLCJjb2ZmZWUiLCJjanN4IiwiQ29mZmVlU2NyaXB0Q29tcGlsZXIiLCJjb25zdHJ1Y3RvciIsImNvbXBpbGVyT3B0aW9ucyIsInNvdXJjZU1hcCIsImdldElucHV0TWltZVR5cGVzIiwiY29tcGlsZVN5bmMiLCJzb3VyY2VDb2RlIiwiZmlsZVBhdGgiLCJyZXF1aXJlIiwiY29tcGlsZSIsIk9iamVjdCIsImFzc2lnbiIsImZpbGVuYW1lIiwianMiLCJ2M1NvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29udmVydEZpbGVQYXRoIiwiY29kZSIsIm1pbWVUeXBlIiwicHJvY2VzcyIsInBsYXRmb3JtIiwicmVzb2x2ZSIsInJlcGxhY2UiLCJlbmNvZGVVUkkiLCJnZXRDb21waWxlclZlcnNpb24iLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxpQkFBaUIsQ0FBQyxXQUFELEVBQWMsbUJBQWQsQ0FBdkI7QUFDQSxJQUFJQyxTQUFTLElBQWI7QUFDQSxJQUFJQyxPQUFPLElBQVg7O0FBRUE7OztBQUdlLE1BQU1DLG9CQUFOLDBDQUFzRDtBQUNuRUMsZ0JBQWM7QUFDWjtBQUNBLFNBQUtDLGVBQUwsQ0FBcUJDLFNBQXJCLEdBQWlDLElBQWpDO0FBQ0Q7O0FBRUQsU0FBT0MsaUJBQVAsR0FBMkI7QUFDekIsV0FBT1AsY0FBUDtBQUNEOztBQUVEUSxjQUFZQyxVQUFaLEVBQXdCQyxRQUF4QixFQUFrQztBQUNoQ1QsYUFBU0EsVUFBVVUsUUFBUSxlQUFSLENBQW5CO0FBQ0FULFdBQU9BLFFBQVFTLFFBQVEsd0JBQVIsQ0FBZjs7QUFGZ0MsMEJBSVJWLE9BQU9XLE9BQVAsQ0FDdEJWLEtBQUtPLFVBQUwsQ0FEc0IsRUFFdEJJLE9BQU9DLE1BQVAsQ0FBYyxFQUFFQyxVQUFVTCxRQUFaLEVBQWQsRUFBc0MsS0FBS0wsZUFBM0MsQ0FGc0IsQ0FKUTs7QUFBQSxRQUkzQlcsRUFKMkIsbUJBSTNCQSxFQUoyQjtBQUFBLFFBSXZCQyxXQUp1QixtQkFJdkJBLFdBSnVCOzs7QUFRaENELFNBQU0sSUFBRUEsRUFBRyxLQUFOLEdBQ0Ysc0RBQW9ELG9CQUFLRSxTQUFTQyxtQkFBbUJGLFdBQW5CLENBQVQsQ0FBTCxDQUFnRCxLQURsRyxHQUVGLGtCQUFnQixLQUFLRyxlQUFMLENBQXFCVixRQUFyQixDQUErQixHQUZsRDs7QUFJQSxXQUFPO0FBQ0xXLFlBQU1MLEVBREQ7QUFFTE0sZ0JBQVU7QUFGTCxLQUFQO0FBSUQ7O0FBRURGLGtCQUFnQlYsUUFBaEIsRUFBMEI7QUFDeEIsUUFBSWEsUUFBUUMsUUFBUixLQUFxQixPQUF6QixFQUFrQztBQUNoQ2QsaUJBQVksS0FBRyxlQUFLZSxPQUFMLENBQWFmLFFBQWIsRUFBdUJnQixPQUF2QixDQUErQixLQUEvQixFQUFzQyxHQUF0QyxDQUEyQyxHQUExRDtBQUNEOztBQUVELFdBQU9DLFVBQVVqQixRQUFWLENBQVA7QUFDRDs7QUFFRGtCLHVCQUFxQjtBQUNuQixXQUFPakIsUUFBUSw0QkFBUixFQUFzQ2tCLE9BQTdDO0FBQ0Q7QUF0Q2tFO2tCQUFoRDFCLG9CIiwiZmlsZSI6ImNvZmZlZXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGJ0b2EgZnJvbSAnYnRvYSc7XG5pbXBvcnQge1NpbXBsZUNvbXBpbGVyQmFzZX0gZnJvbSAnLi4vY29tcGlsZXItYmFzZSc7XG5cbmNvbnN0IGlucHV0TWltZVR5cGVzID0gWyd0ZXh0L2Nqc3gnLCAndGV4dC9jb2ZmZWVzY3JpcHQnXTtcbmxldCBjb2ZmZWUgPSBudWxsO1xubGV0IGNqc3ggPSBudWxsO1xuXG4vKipcbiAqIEBhY2Nlc3MgcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2ZmZWVTY3JpcHRDb21waWxlciBleHRlbmRzIFNpbXBsZUNvbXBpbGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb21waWxlck9wdGlvbnMuc291cmNlTWFwID0gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnB1dE1pbWVUeXBlcygpIHtcbiAgICByZXR1cm4gaW5wdXRNaW1lVHlwZXM7XG4gIH1cblxuICBjb21waWxlU3luYyhzb3VyY2VDb2RlLCBmaWxlUGF0aCkge1xuICAgIGNvZmZlZSA9IGNvZmZlZSB8fCByZXF1aXJlKCdjb2ZmZWUtc2NyaXB0Jyk7XG4gICAgY2pzeCA9IGNqc3ggfHwgcmVxdWlyZSgnY29mZmVlLXJlYWN0LXRyYW5zZm9ybScpO1xuXG4gICAgbGV0IHtqcywgdjNTb3VyY2VNYXB9ID0gY29mZmVlLmNvbXBpbGUoXG4gICAgICBjanN4KHNvdXJjZUNvZGUpLFxuICAgICAgT2JqZWN0LmFzc2lnbih7IGZpbGVuYW1lOiBmaWxlUGF0aCB9LCB0aGlzLmNvbXBpbGVyT3B0aW9ucykpO1xuXG4gICAganMgPSBgJHtqc31cXG5gICtcbiAgICAgIGAvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCR7YnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodjNTb3VyY2VNYXApKSl9XFxuYCArXG4gICAgICBgLy8jIHNvdXJjZVVSTD0ke3RoaXMuY29udmVydEZpbGVQYXRoKGZpbGVQYXRoKX1gO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvZGU6IGpzLFxuICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J1xuICAgIH07XG4gIH1cblxuICBjb252ZXJ0RmlsZVBhdGgoZmlsZVBhdGgpIHtcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgZmlsZVBhdGggPSBgLyR7cGF0aC5yZXNvbHZlKGZpbGVQYXRoKS5yZXBsYWNlKC9cXFxcL2csICcvJyl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlVVJJKGZpbGVQYXRoKTtcbiAgfVxuXG4gIGdldENvbXBpbGVyVmVyc2lvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnY29mZmVlLXNjcmlwdC9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuICB9XG59XG4iXX0=